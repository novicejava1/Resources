Purpose - Managing Secrets within Container image

Pre-requisite -
Fedora 32 installed
Podman installed
buildah installed

At any point of time in you might have came across a situation where in you wanted to managed you secrets in such a way that they are available for use when required but are not visible when not required. Here in this article we will see how we can manage secrets in a container image. Secrets can be any thing like passwords file, keystores, certificates, tokens etc.

Buildah mounts.conf (/usr/share/containers/mounts.conf and optionally /etc/containers/mounts.conf)

       The  mounts.conf  files specify volume mount files or directories that are automatically mounted inside containers when exe‐
       cuting the buildah run or buildah build-using-dockerfile commands.  Container processes can then use this content.  The vol‐
       ume mount content does not get committed to the final image.

       Usually  these  directories  are  used  for passing secrets or credentials required by the package software to access remote
       package repositories.

Procedure -

Step1: Create a directory with a secret file to be managed

[admin@fed32 secrets]$ pwd
/home/admin/secrets
[admin@fed32 secrets]$ cat secret.txt 
fadfjksgjdkfierjeigjrgrhdrgss

Step2: Make sure you have podman and build installed

[admin@fed32 secrets]$ podman --version
podman version 2.2.1
[admin@fed32 secrets]$ buildah --version
buildah version 1.18.0 (image-spec 1.0.1-dev, runtime-spec 1.0.2-dev)

Step3: Update the mounts.conf to volume mount the secret.txt automatically into the container

[admin@fed32 secrets]$ cat /etc/containers/mounts.conf 
/home/admin/secrets:/run/secrets

Step4: Instantiate a container and check the secret loaded into the container automatically or not

[admin@fed32 secrets]$ podman run --name secretcontainer -it docker.io/library/busybox ls -ltr /run/secrets/ 
total 4
-rw-rw-r--    1 root     root            30 Jan 12 18:41 secret.txt

Step5: Validate the container image layer

podman unshare command, switches you into the user namespace that rootless Podman is currently running, so things look exactly the same for unshare as they do for rootless

[admin@fed32 secrets]$ podman unshare
[root@fed32 secrets]# mnt=$(podman mount secretcontainer)
[root@fed32 secrets]# ls -ltr $mnt/run/secrets/
total 0
[root@fed32 secrets]#

Note the secrets directory gets created since this is the mount point necessary for the volume, but the content is not in the container image.

Step6: Start the container and revalidate the secret

[admin@fed32 secrets]$ podman start -i --attach secretcontainer
total 4
-rw-rw-r--    1 root     root            30 Jan 12 18:41 secret.txt





